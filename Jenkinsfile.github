/*
 *
 *  MIT License
 *
 *  (C) Copyright 2022 Hewlett Packard Enterprise Development LP
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 *  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 *  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 *  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 *  OTHER DEALINGS IN THE SOFTWARE.
 *
 */
@Library('csm-shared-library') _

def credentialsId = 'artifactory-algol60'
pipeline {
    agent {
        label "metal-gcp-builder"
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: "5"))
        disableConcurrentBuilds()
        timeout(time: 30, unit: 'MINUTES')
        timestamps()
    }

    environment {
        SUFFIX = "${env.JOB_BASE_NAME.replaceAll("%2F", "-").toLowerCase()}-${env.BUILD_NUMBER}"
        DOCKER_REGISTRY = "https://artifactory.algol60.net/csm-docker/stable"
    }

    stages {
        stage('Setup Docker Cache') {
            steps {
                withCredentials([usernamePassword(credentialsId: credentialsId, usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_TOKEN')]) {
                    sh "docker login ${env.DOCKER_REGISTRY} --username \$ARTIFACTORY_USER --password \$ARTIFACTORY_TOKEN"
                    sh "./scripts/update-package-versions.sh -a x86_64 --refresh --no-cache --suffix ${env.SUFFIX}"
                    sh "./scripts/update-package-versions.sh -a x86_64 --compute --refresh --no-cache --suffix ${env.SUFFIX}"
                    sh "./scripts/update-package-versions.sh -a aarch64 --refresh --no-cache --suffix ${env.SUFFIX}"
                    sh "./scripts/update-package-versions.sh -a aarch64 --compute --refresh --no-cache --suffix ${env.SUFFIX}"
                }
            }
        }

        stage('Validate node-image-base packages') {
            steps {
                sh "./scripts/update-package-versions.sh -a aarch64 -p packages/node-image-base/base.packages --validate --suffix ${env.SUFFIX}"
                sh "./scripts/update-package-versions.sh -a x86_64 -p packages/node-image-base/base.packages --validate --suffix ${env.SUFFIX}"
                sh "./scripts/update-package-versions.sh -a aarch64 -p packages/node-image-base/base-aarch64.packages --validate --suffix ${env.SUFFIX}"
                sh "./scripts/update-package-versions.sh -a x86_64 -p packages/node-image-base/base-x86_64.packages --validate --suffix ${env.SUFFIX}"
                sh "./scripts/update-package-versions.sh -a x86_64 -p packages/node-image-base/metal.packages --validate --suffix ${env.SUFFIX}"
                sh "./scripts/update-package-versions.sh -a x86_64 -p packages/node-image-base/google.packages --validate --suffix ${env.SUFFIX}"
                sh "./scripts/update-package-versions.sh -a x86_64 -p packages/node-image-base/vagrant.packages --validate --suffix ${env.SUFFIX}"
            }
        }

        stage('Validate node-image-application packages') {
            steps {
                sh "./scripts/update-package-versions.sh -a x86_64 -p packages/node-image-application/base.packages --compute --validate --suffix ${env.SUFFIX}"
            }
        }

        stage('Validate node-image-compute packages') {
            steps {
                sh "./scripts/update-package-versions.sh -a aarch64 -p packages/node-image-compute/base.packages --compute --validate --suffix ${env.SUFFIX}"
                sh "./scripts/update-package-versions.sh -a x86_64 -p packages/node-image-compute/base.packages --compute --validate --suffix ${env.SUFFIX}"
                sh "./scripts/update-package-versions.sh -a aarch64 -p packages/node-image-compute/base-aarch64.packages --compute --validate --suffix ${env.SUFFIX}"
                sh "./scripts/update-package-versions.sh -a x86_64 -p packages/node-image-compute/base-x86_64.packages --compute --validate --suffix ${env.SUFFIX}"
            }
        }

        stage('Validate node-image-ncn-common packages') {
            steps {
                sh "./scripts/update-package-versions.sh -a x86_64 -p packages/node-image-ncn-common/base.packages --validate --suffix ${env.SUFFIX}"
                sh "./scripts/update-package-versions.sh -a x86_64 -p packages/node-image-ncn-common/metal.packages --validate --suffix ${env.SUFFIX}"
            }
        }

        stage('Validate node-image-pre-install-toolkit packages') {
            steps {
                sh "./scripts/update-package-versions.sh -a x86_64 -p packages/node-image-pre-install-toolkit/base.packages --validate --suffix ${env.SUFFIX}"
            }
        }

        stage('Validate node-image-kubernetes packages') {
            steps {
                sh "./scripts/update-package-versions.sh -a x86_64 -p packages/node-image-kubernetes/base.packages --validate --suffix ${env.SUFFIX}"
                sh "./scripts/update-package-versions.sh -a x86_64 -p packages/node-image-kubernetes/google.packages --validate --suffix ${env.SUFFIX}"
                sh "./scripts/update-package-versions.sh -a x86_64 -p packages/node-image-kubernetes/metal.packages --validate --suffix ${env.SUFFIX}"
            }
        }

        stage('Validate node-image-storage-ceph packages') {
            steps {
                sh "./scripts/update-package-versions.sh -a x86_64 -p packages/node-image-storage-ceph/base.packages --validate --suffix ${env.SUFFIX}"
                sh "./scripts/update-package-versions.sh -a x86_64 -p packages/node-image-storage-ceph/metal.packages --validate --suffix ${env.SUFFIX}"
            }
        }

    }
}
